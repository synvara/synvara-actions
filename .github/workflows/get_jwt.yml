name: Get GitHub OIDC JWT

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  get_jwt:
    runs-on: ubuntu-latest
    # Add permissions required for OIDC token generation
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check environment
        run: |
          echo "Checking if required tools are available..."
          which jq || echo "jq not found"
          echo "Checking environment variables..."
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN exists: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN != '' }}"
          echo "ACTIONS_ID_TOKEN_REQUEST_URL exists: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL != '' }}"

      - name: Install jq if needed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Get GitHub OIDC token directly
        id: github_token
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Use provided `core` object; do not re-import
            const idToken = await core.getIDToken('api://github.com');
            core.setSecret(idToken);
            core.setOutput('token', idToken);

      - name: Print JWT parts (split to avoid masking)
        if: steps.github_token.outputs.token != ''
        run: |
          TOKEN="${{ steps.github_token.outputs.token }}"
          if [ -z "$TOKEN" ]; then
            echo "Error: Token is empty"
            exit 1
          fi
          echo "JWT Header (decode with base64):"
          echo $TOKEN | cut -d'.' -f1
          echo ""
          echo "JWT Payload (decode with base64):"
          echo $TOKEN | cut -d'.' -f2
          echo ""
          echo "To decode, go to https://jwt.io/ and paste the header and payload with dots between them"

      - name: Decode JWT
        if: steps.github_token.outputs.token != ''
        run: |
          TOKEN="${{ steps.github_token.outputs.token }}"
          if [ -z "$TOKEN" ]; then
            echo "Error: Token is empty"
            exit 1
          fi
          HEADER=$(echo ${TOKEN} | cut -d"." -f1)
          PAYLOAD=$(echo ${TOKEN} | cut -d"." -f2)

          # The sed commands fix potential base64 URL encoding issues
          HEADER_PAD=$(echo -n $HEADER | sed 's/-/+/g' | sed 's/_/\//g')
          PAYLOAD_PAD=$(echo -n $PAYLOAD | sed 's/-/+/g' | sed 's/_/\//g')

          # Add padding
          REMAINDER=$((${#HEADER_PAD} % 4))
          if [ $REMAINDER -eq 1 ]; then
            HEADER_PAD="${HEADER_PAD}==="
          elif [ $REMAINDER -eq 2 ]; then
            HEADER_PAD="${HEADER_PAD}=="
          elif [ $REMAINDER -eq 3 ]; then
            HEADER_PAD="${HEADER_PAD}="
          fi

          REMAINDER=$((${#PAYLOAD_PAD} % 4))
          if [ $REMAINDER -eq 1 ]; then
            PAYLOAD_PAD="${PAYLOAD_PAD}==="
          elif [ $REMAINDER -eq 2 ]; then
            PAYLOAD_PAD="${PAYLOAD_PAD}=="
          elif [ $REMAINDER -eq 3 ]; then
            PAYLOAD_PAD="${PAYLOAD_PAD}="
          fi

          echo "Header:"
          echo $HEADER_PAD | base64 -d 2>/dev/null || echo $HEADER_PAD | base64 --decode 2>/dev/null

          echo "Payload:"
          echo $PAYLOAD_PAD | base64 -d 2>/dev/null || echo $PAYLOAD_PAD | base64 --decode 2>/dev/null
