# Example path: .github/workflows/reusable-pr-approve.yml
# Place this file in your central actions repository (e.g., synvara-actions or synvara/.github)

name: Reusable PR Approve Bot

# Define this workflow as callable by other workflows
on:
  workflow_call:
    # Define inputs the caller workflow must provide
    inputs:
      pr_number:
        description: 'The pull request number to potentially approve'
        required: true
        type: number
      pr_head_sha:
        description: 'The SHA of the HEAD commit of the pull request'
        required: true
        type: string # Pass the specific SHA from the PR event

    # Define secrets the caller workflow must pass
    secrets:
      APP_ID:
        description: 'The App ID of the GitHub App used for approvals'
        required: true
      PRIVATE_KEY:
        description: 'The Private Key of the GitHub App used for approvals'
        required: true

jobs:
  approve:
    name: Attempt PR Approval
    runs-on: ubuntu-latest
    steps:
      # Step 1: Generate an installation access token for the GitHub App
      # This token will be used to authenticate API calls as the App
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          # Use the correct input names 'app-id' and 'private-key'
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          # The GitHub App needs 'pull_requests: write' permission

      # Step 2: Check conditions and potentially approve the PR
      - name: Approve Pull Request (Conditional Logic)
        env:
          # Make token, PR number, repo name, and commit SHA available to the script
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ inputs.pr_number }}
          REPO_FULL_NAME: ${{ github.repository }} # Gets the owner/repo name where the caller runs
          COMMIT_SHA: ${{ inputs.pr_head_sha }}   # Use the commit SHA passed from the caller
        run: |
          echo "Checking conditions for PR #${PR_NUMBER} in ${REPO_FULL_NAME}"
          echo "Commit SHA to approve: ${COMMIT_SHA}"

          # ------------------------------------------------------------------
          # --- CRITICAL: ADD YOUR APPROVAL LOGIC HERE ---
          # ------------------------------------------------------------------
          # This section MUST contain logic to decide IF the approval should happen.
          # Do NOT leave it unconditional unless you absolutely intend for this
          # workflow to approve every PR it's called on!
          #
          # Example Checks You Might Implement:
          # - Use `curl` and $GH_TOKEN to check if all required status checks passed for $COMMIT_SHA
          # - Check if the PR author is trusted (e.g., `${{ github.actor }}` in the caller context)
          # - Check if only certain file types were changed (e.g., *.md)
          # - Check if the PR size is below a threshold
          # - Call an external AI service for analysis

          # Example placeholder condition (replace with real checks!):
          echo "Placeholder: Assuming conditions are met."
          approve_decision="true" # SET THIS BASED ON YOUR ACTUAL CHECKS

          # Exit if conditions are not met
          if [ "$approve_decision" != "true" ]; then
            echo "Conditions not met for automatic approval. Skipping."
            exit 0
          fi

          # --- API Call to Approve ---
          echo "Conditions met. Attempting to approve PR #${PR_NUMBER} via API..."

          # Use curl to call the GitHub API endpoint for creating a review
          curl --request POST \
          --url "https://api.github.com/repos/${REPO_FULL_NAME}/pulls/${PR_NUMBER}/reviews" \
          --header "Authorization: Bearer ${GH_TOKEN}" \
          --header "Accept: application/vnd.github+json" \
          --header "X-GitHub-Api-Version: 2022-11-28" \
          --data @- <<EOF
          {
            "commit_id": "${COMMIT_SHA}",
            "body": "Approved automatically by Synvara Bot based on predefined criteria.",
            "event": "APPROVE"
          }
EOF
          # Check the exit code of the curl command for success/failure
          if [ $? -ne 0 ]; then
            echo "API call to approve failed!"
            exit 1 # Fail the workflow step if API call fails
          else
            echo "Approval API call successful."
          fi
