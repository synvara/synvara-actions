# Example path: .github/workflows/reusable-pr-approve.yml

name: Reusable PR Approve Bot

on:
  workflow_call:
    inputs:
      pr_number:
        description: "The pull request number to potentially approve"
        required: true
        type: number
      pr_head_sha:
        description: "The SHA of the HEAD commit of the pull request"
        required: true
        type: string
      allowed_authors:
        description: "Comma-separated list of allowed PR authors"
        required: false
        type: string
        default: ""
      max_changed_files:
        description: "Maximum number of files that can be changed"
        required: false
        type: number
        default: 100
      allowed_file_patterns:
        description: 'Comma-separated list of allowed file patterns (e.g., "*.md,*.txt")'
        required: false
        type: string
        default: ""
      check_workflow_name:
        description: "Name of workflow to check for completion"
        required: false
        type: string
        default: "Validate Svelte 5 Template (using Bun)"
      skip_status_checks:
        description: "Skip commit status check verification (use when you have permission issues)"
        required: false
        type: boolean
        default: false

    secrets:
      APP_ID:
        description: "The App ID of the GitHub App used for approvals"
        required: true
      PRIVATE_KEY:
        description: "The Private Key of the GitHub App used for approvals"
        required: true

jobs:
  approve:
    name: Attempt PR Approval
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Check PR Status and Conditions
        id: check_conditions
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ inputs.pr_number }}
          REPO_FULL_NAME: ${{ github.repository }}
          COMMIT_SHA: ${{ inputs.pr_head_sha }}
          ALLOWED_AUTHORS: ${{ inputs.allowed_authors }}
          MAX_CHANGED_FILES: ${{ inputs.max_changed_files }}
          ALLOWED_FILE_PATTERNS: ${{ inputs.allowed_file_patterns }}
          CHECK_WORKFLOW_NAME: ${{ inputs.check_workflow_name }}
          SKIP_STATUS_CHECKS: ${{ inputs.skip_status_checks }}
        run: |
          echo "Checking conditions for PR #${PR_NUMBER} in ${REPO_FULL_NAME}"
          echo "Commit SHA to approve: ${COMMIT_SHA}"

          # Check if PR exists and get its details
          pr_data=$(curl -s -H "Authorization: Bearer ${GH_TOKEN}" \
            "https://api.github.com/repos/${REPO_FULL_NAME}/pulls/${PR_NUMBER}")

          if [[ $(echo "$pr_data" | jq -r '.message') == "Not Found" ]]; then
            echo "Error: PR #${PR_NUMBER} not found!"
            exit 1
          fi

          # Extract PR details
          pr_author=$(echo "$pr_data" | jq -r '.user.login')
          changed_files=$(echo "$pr_data" | jq -r '.changed_files')
          pr_state=$(echo "$pr_data" | jq -r '.state')

          # Check if PR is open
          if [[ "$pr_state" != "open" ]]; then
            echo "Error: PR is not open (current state: ${pr_state})"
            exit 1
          fi

          # Check author if allowed_authors is specified
          if [[ -n "$ALLOWED_AUTHORS" ]]; then
            IFS=',' read -ra AUTHORS <<< "$ALLOWED_AUTHORS"
            author_allowed=false
            for author in "${AUTHORS[@]}"; do
              if [[ "$pr_author" == "$author" ]]; then
                author_allowed=true
                break
              fi
            done
            if [[ "$author_allowed" != "true" ]]; then
              echo "Error: PR author ${pr_author} not in allowed list"
              exit 1
            fi
          fi

          # Check number of changed files
          if [[ $changed_files -gt $MAX_CHANGED_FILES ]]; then
            echo "Error: Too many files changed (${changed_files} > ${MAX_CHANGED_FILES})"
            exit 1
          fi

          # Check file patterns if specified
          if [[ -n "$ALLOWED_FILE_PATTERNS" ]]; then
            files_data=$(curl -s -H "Authorization: Bearer ${GH_TOKEN}" \
              "https://api.github.com/repos/${REPO_FULL_NAME}/pulls/${PR_NUMBER}/files")
            
            IFS=',' read -ra PATTERNS <<< "$ALLOWED_FILE_PATTERNS"
            while read -r file; do
              file_allowed=false
              for pattern in "${PATTERNS[@]}"; do
                if [[ "$file" == $pattern ]]; then
                  file_allowed=true
                  break
                fi
              done
              if [[ "$file_allowed" != "true" ]]; then
                echo "Error: File ${file} does not match allowed patterns"
                exit 1
              fi
            done < <(echo "$files_data" | jq -r '.[].filename')
          fi

          # If we're skipping status checks, approve directly
          if [[ "$SKIP_STATUS_CHECKS" == "true" ]]; then
            echo "Skipping commit status checks as requested"
            echo "approve_decision=true" >> $GITHUB_ENV
            exit 0
          fi

          # Get workflow runs for the PR branch
          workflow_runs=$(curl -s -H "Authorization: Bearer ${GH_TOKEN}" \
            "https://api.github.com/repos/${REPO_FULL_NAME}/actions/runs?head_sha=${COMMIT_SHA}")

          echo "Workflow runs for this commit:"
          echo "$workflow_runs" | jq -r '.workflow_runs[] | .name + ": " + .conclusion'

          # Look for the specific workflow we care about
          if echo "$workflow_runs" | jq -r '.workflow_runs[] | select(.name=="'"${CHECK_WORKFLOW_NAME}"'") | .conclusion' | grep -q "success"; then
            echo "Required workflow '${CHECK_WORKFLOW_NAME}' completed successfully"
            echo "approve_decision=true" >> $GITHUB_ENV
          else
            echo "Error: Required workflow '${CHECK_WORKFLOW_NAME}' has not completed successfully"
            workflow_status=$(echo "$workflow_runs" | jq -r '.workflow_runs[] | select(.name=="'"${CHECK_WORKFLOW_NAME}"'") | .conclusion')
            if [[ -z "$workflow_status" ]]; then
              echo "Workflow '${CHECK_WORKFLOW_NAME}' not found in runs"
            else
              echo "Workflow status: $workflow_status"
            fi
            exit 1
          fi

      - name: Approve Pull Request
        if: env.approve_decision == 'true'
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ inputs.pr_number }}
          REPO_FULL_NAME: ${{ github.repository }}
          COMMIT_SHA: ${{ inputs.pr_head_sha }}
        run: |
          echo "Attempting to approve PR #${PR_NUMBER}"

          response=$(curl -s -w "\n%{http_code}" --request POST \
            --url "https://api.github.com/repos/${REPO_FULL_NAME}/pulls/${PR_NUMBER}/reviews" \
            --header "Authorization: Bearer ${GH_TOKEN}" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --data '{
              "commit_id": "'"${COMMIT_SHA}"'",
              "body": "Approved automatically by Synvara Bot after passing all required checks.",
              "event": "APPROVE"
            }')

          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n-1)

          echo "API Response Status: ${http_code}"
          echo "API Response Body:"
          echo "$response_body" | jq '.'

          if [[ "$http_code" != "200" ]]; then
            echo "Error: API call failed with status ${http_code}"
            exit 1
          fi

          echo "PR successfully approved"
